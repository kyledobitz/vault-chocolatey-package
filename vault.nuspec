<?xml version="1.0"?>
<package xmlns="http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd">
  <metadata>
    <id>vault</id>
    <version>0.8.0</version>
    <title>Vault</title>
    <authors>Mitchell Hashimoto,  HashiCorp</authors>
    <owners>Mitchell Hashimoto,  HashiCorp</owners>
    <licenseUrl>https://github.com/hashicorp/vault/blob/master/LICENSE</licenseUrl>
    <projectUrl>https://www.vaultproject.io/</projectUrl>
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/68bd9f48bdf960b40c3b1a590c7aac3f0fdfb59f/vault/icons/vault.png</iconUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.

The key features of Vault are:

* **Secure Secret Storage**: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, [Consul](https://www.consul.io), and more.
* **Dynamic Secrets**: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.
* **Data Encryption**: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as SQL without having to design their own encryption methods.
* **Leasing and Renewal**: All secrets in Vault have a _lease_ associated with it. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.
* **Revocation**: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.

For more information, see the [introduction section](https://www.vaultproject.io/intro) of the Vault website.</description>
    <summary>Vault is a tool for securely accessing secrets</summary>
    <releaseNotes>## 0.8.0 (August 9th, 2017)

SECURITY:

 * We've added a note to the docs about the way the GitHub auth backend works
   as it may not be readily apparent that GitHub personal access tokens, which
   are used by the backend, can be used for unauthorized access if they are
   stolen from third party services and access to Vault is public.

DEPRECATIONS/CHANGES:

 * Database Plugin Backends: Passwords generated for these backends now
   enforce stricter password requirements, as opposed to the previous behavior 
   of returning a randomized UUID. Passwords are of length 20, and have a `A1a-` 
   characters prepended to ensure stricter requirements. No regressions are 
   expected from this change. (For database backends that were previously
   substituting underscores for hyphens in passwords, this will remain the
   case.)
 * Lease Endpoints: The endpoints `sys/renew`, `sys/revoke`, `sys/revoke-prefix`,
   `sys/revoke-force` have been deprecated and relocated under `sys/leases`.
   Additionally, the deprecated path `sys/revoke-force` now requires the `sudo`
   capability.
 * Response Wrapping Lookup Unauthenticated: The `sys/wrapping/lookup` endpoint
   is now unauthenticated. This allows introspection of the wrapping info by
   clients that only have the wrapping token without then invalidating the
   token. Validation functions/checks are still performed on the token.

FEATURES:

 * **Cassandra Storage**: Cassandra can now be used for Vault storage
 * **CockroachDB Storage**: CockroachDB can now be used for Vault storage
 * **CouchDB Storage**: CouchDB can now be used for Vault storage
 * **SAP HANA Database Plugin**: The `databases` backend can now manage users
   for SAP HANA databases
 * **Plugin Backends**: Vault now supports running secret and auth backends as
   plugins. Plugins can be mounted like normal backends and can be developed
   independently from Vault.
 * **PROXY Protocol Support** Vault listeners can now be configured to honor
   PROXY protocol v1 information to allow passing real client IPs into Vault. A
   list of authorized addresses (IPs or subnets) can be defined and
   accept/reject behavior controlled.
 * **Lease Lookup and Browsing in the Vault Enterprise UI**: Vault Enterprise UI
   now supports lookup and listing of leases and the associated actions from the 
   `sys/leases` endpoints in the API. These are located in the new top level 
   navigation item "Leases".
 * **Filtered Mounts for Performance Mode Replication**: Whitelists or
   blacklists of mounts can be defined per-secondary to control which mounts
   are actually replicated to that secondary. This can allow targeted
   replication of specific sets of data to specific geolocations/datacenters.
 * **Disaster Recovery Mode Replication (Enterprise Only)**: There is a new
   replication mode, Disaster Recovery (DR), that performs full real-time
   replication (including tokens and leases) to DR secondaries. DR secondaries
   cannot handle client requests, but can be promoted to primary as needed for
   failover.
 * **Manage New Replication Features in the Vault Enterprise UI**: Support for 
   Replication features in Vault Enterprise UI has expanded to include new DR 
   Replication mode and management of Filtered Mounts in Performance Replication
   mode.
 * **Vault Identity (Enterprise Only)**: Vault's new Identity system allows
   correlation of users across tokens. At present this is only used for MFA,
   but will be the foundation of many other features going forward.
 * **Duo Push, Okta Push, and TOTP MFA For All Authenticated Paths (Enterprise
   Only)**: A brand new MFA system built on top of Identity allows MFA
   (currently Duo Push, Okta Push, and TOTP) for any authenticated path within
   Vault. MFA methods can be configured centrally, and TOTP keys live within
   the user's Identity information to allow using the same key across tokens.
   Specific MFA method(s) required for any given path within Vault can be
   specified in normal ACL path statements.

IMPROVEMENTS:

 * api: Add client method for a secret renewer background process [GH-2886]
 * api: Add `RenewTokenAsSelf` [GH-2886]
 * api: Client timeout can now be adjusted with the `VAULT_CLIENT_TIMEOUT` env
   var or with a new API function [GH-2956]
 * api/cli: Client will now attempt to look up SRV records for the given Vault
   hostname [GH-3035]
 * audit/socket: Enhance reconnection logic and don't require the connection to
   be established at unseal time [GH-2934]
 * audit/file: Opportunistically try re-opening the file on error [GH-2999]
 * auth/approle: Add role name to token metadata [GH-2985]
 * auth/okta: Allow specifying `ttl`/`max_ttl` inside the mount [GH-2915]
 * cli: Client timeout can now be adjusted with the `VAULT_CLIENT_TIMEOUT` env
   var [GH-2956]
 * command/auth: Add `-token-only` flag to `vault auth` that returns only the
   token on stdout and does not store it via the token helper [GH-2855]
 * core: CORS allowed origins can now be configured [GH-2021]
 * core: Add metrics counters for audit log failures [GH-2863]
 * cors: Allow setting allowed headers via the API instead of always using
   wildcard [GH-3023]
 * secret/ssh: Allow specifying the key ID format using template values for CA
   type [GH-2888]
 * server: Add `tls_client_ca_file` option for specifying a CA file to use for
   client certificate verification when `tls_require_and_verify_client_cert` is
   enabled [GH-3034]
 * storage/cockroachdb: Add CockroachDB storage backend [GH-2713]
 * storage/couchdb: Add CouchhDB storage backend [GH-2880]
 * storage/mssql: Add `max_parallel` [GH-3026]
 * storage/postgresql: Add `max_parallel` [GH-3026]
 * storage/postgresql: Improve listing speed [GH-2945]
 * storage/s3: More efficient paging when an object has a lot of subobjects
   [GH-2780]
 * sys/wrapping: Make `sys/wrapping/lookup` unauthenticated [GH-3084]
 * sys/wrapping: Wrapped tokens now store the original request path of the data
   [GH-3100]
 * telemetry: Add support for DogStatsD [GH-2490]

BUG FIXES:

 * api/health: Don't treat standby `429` codes as an error [GH-2850]
 * api/leases: Fix lease lookup returning lease properties at the top level
 * audit: Fix panic when audit logging a read operation on an asymmetric
   `transit` key [GH-2958]
 * auth/approle: Fix panic when secret and cidr list not provided in role
   [GH-3075]
 * auth/aws: Look up proper account ID on token renew [GH-3012]
 * auth/aws: Store IAM header in all cases when it changes [GH-3004]
 * auth/ldap: Verify given certificate is PEM encoded instead of failing
   silently [GH-3016]
 * auth/token: Don't allow using the same token ID twice when manually
   specifying [GH-2916]
 * cli: Fix issue with parsing keys that start with special characters [GH-2998]
 * core: Relocated `sys/leases/renew` returns same payload as original 
   `sys/leases` endpoint [GH-2891]
 * secret/ssh: Fix panic when signing with incorrect key type [GH-3072]
 * secret/totp: Ensure codes can only be used once. This makes some automated
   workflows harder but complies with the RFC. [GH-2908]
 * secret/transit: Fix locking when creating a key with unsupported options
   [GH-2974]
   
## Previous Releases
For more information on previous releases, check out the changelog on [GitHub](https://github.com/hashicorp/vault/blob/v0.8.0/CHANGELOG.md).</releaseNotes>
    <copyright>HashiCorp 2015-2017</copyright>
    <tags>vault hashicorp</tags>
    <projectSourceUrl>https://github.com/hashicorp/vault</projectSourceUrl>
    <packageSourceUrl>https://github.com/jamestoyer/chocolatey-packages</packageSourceUrl>
    <docsUrl>https://www.vaultproject.io/docs/index.html</docsUrl>
    <bugTrackerUrl>https://github.com/hashicorp/vault/issues</bugTrackerUrl>
  </metadata>
</package>